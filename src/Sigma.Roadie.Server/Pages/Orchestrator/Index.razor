@page "/"
@using Microsoft.AspNetCore.SignalR
@using Sigma.Roadie.Server.Orquestrator
@using Microsoft.AspNetCore.SignalR.Client;
@inject IHubContext<OrchestratorHub, IOrchestratorHub> orchestrator

@code {

    List<Domain.DataModels.Setlist> AvailableSetlists { get; set; }

    Domain.DataModels.Setlist LoadedSetlist { get; set; }

    bool Loaded = false;

    Guid selectedSetlistId { get; set; } = Guid.Empty;

    List<MediaPlayerStatus> status = new List<MediaPlayerStatus>();


    protected override async Task OnInitializedAsync()
    {
        AvailableSetlists = await SetlistService.GetSetlists();

        var active = (from p in AvailableSetlists where p.IsActive == true select p).FirstOrDefault();
        if (active != null)
        {
            selectedSetlistId = active.SetlistId;
            LoadedSetlist = await SetlistService.GetSetlistById(selectedSetlistId);
        }

        CreateHub();

        Loaded = true;
    }


    async Task CreateHub()
    {
        if (Loaded) return;

        var hub = new HubConnectionBuilder()
                .WithUrl("http://localhost:5000/orchestratorhub")
                .WithAutomaticReconnect()
                .Build();

        hub.KeepAliveInterval = TimeSpan.FromSeconds(3);

        hub.On<string>("StatusUpdate", StatusUpdate);

        await hub.StartAsync();
    }


    void StatusUpdate(string json)
    {
        if (string.IsNullOrWhiteSpace(json)) return;

        var incomingStatus = JsonConvert.DeserializeObject<MediaPlayerStatus>(json);

        status.RemoveAll(q => q.Hostname == incomingStatus.Hostname);

        status.Add(incomingStatus);

        StateHasChanged();
    }


    async Task LoadSetlist()
    {
        await SetlistService.SetActiveSetlist(selectedSetlistId);

        if (selectedSetlistId == Guid.Empty)
        {
            LoadedSetlist = null;
        }
        else
        {
            LoadedSetlist = await SetlistService.GetSetlistById(selectedSetlistId);
        }
    }


    async Task PlayScene(Scene scene)
    {
        foreach (var media in scene.MediaFile)
        {
            if (media.PlayAt.HasValue == false || media.PlayAt?.Ticks == 0)
            {
                await PlayMedia(media);
            }
        }
    }

    async Task PlayMedia(MediaFile media)
    {
        var clean = new MediaFile()
        {
            PlayAt = media.PlayAt,
            LocalUri = media.LocalUri,
            MediaFileId = media.MediaFileId,
            Name = media.Name,
            SceneId = media.SceneId,
            Type = media.Type
        };
        var json = Newtonsoft.Json.JsonConvert.SerializeObject(clean);
        await orchestrator.Clients.All.PlayMedia(json);
    }

    async Task StopMedia(Guid mediaFileId)
    {
        await orchestrator.Clients.All.StopMedia(mediaFileId);
    }

    async Task StopAll()
    {
        await orchestrator.Clients.All.StopAll();
    }

    bool IsMediaFilePlaying(Guid mediaFileId)
    {
        return status.Any(q => q.MediaFiles.Any(m => m.MediaFileId == mediaFileId));
    }

}


<h1>Roadie</h1>


@if (Loaded)
{

    <div class="row">

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    Setlist
                </div>
                <div class="card-body">
                    <FormItem Label="Setlist:">
                        <select class="form-control" @onchange="(e) => selectedSetlistId = Guid.Parse(e.Value.ToString())">
                            <option value="@Guid.Empty">Ninguno</option>

                            @foreach (var setlist in AvailableSetlists)
                            {
                                <option value="@setlist.SetlistId" selected="@setlist.IsActive">@setlist.Name</option>
                            }
                        </select>
                    </FormItem>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-primary" @onclick="LoadSetlist">Cargar setlist</button>
                </div>
            </div>
        </div>

        @foreach(var stat in status)
        {
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        @stat.Hostname
                    </div>
                    <div class="card-body">
                        <FormItem Label="Actualizado:">
                            @stat.LocalDateTime
                        </FormItem>
                    </div>
                </div>
            </div>
        }
    </div>

    <br />



    @if (LoadedSetlist != null)
    {

        @foreach (var scene in LoadedSetlist.SetlistScene)
        {
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        @scene.Index / @scene.Scene.Name
                        <button type="button" class="btn btn-primary btn-sm float-right" @onclick="@(() => PlayScene(scene.Scene))"><i class="oi oi-media-play"></i></button>
                    </div>

                    @if (scene.Scene.MediaFile.Count > 0)
                    {
                    <div class="card-body">
                        <table class="table table-borderless">
                            <thead>
                                <tr>
                                    <th>Tipo</th>
                                    <th>Nombre</th>
                                    <th>Desfase</th>
                                    <th>Controles</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var media in scene.Scene.MediaFile)
                                {
                                <tr>
                                    <td><Sigma.Roadie.Server.Pages.MediaFiles.Components.MediaFileLabel Media="media" /></td>
                                    <td>@media.Name</td>
                                    <td>@media.PlayAt</td>
                                    <td>
                                        <button type="button" class="btn btn-success" @onclick="() => PlayMedia(media)"><i class="oi oi-media-play"></i></button>

                                        @if (IsMediaFilePlaying(media.MediaFileId))
                                        {
                                            <button type="button" class="btn btn-danger" @onclick="() => StopMedia(media.MediaFileId)"><i class="oi oi-media-stop"></i></button>
                                        }
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    }
                </div>
            </div>
            <br />
        }
    }
}
